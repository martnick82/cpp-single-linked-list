#pragma once
#include <cassert>

//  Не получилось у меня вынести реализвцию функций из класса. Пробовал в таком виде:
//  template <typename Type>
//  [[nodiscard]] SingleLinkedList<Type>::Iterator  SingleLinkedList<Type>::end() noexcept 
//   {...}
//  но при компиляции выдаёт ошибки синтаксиса
//  оставил как есть до дальнейших указаний)))
//

template <typename Type>
class SingleLinkedList 
{
    // Узел списка
    struct Node 
    {
        Node() = default;
        Node(const Type& val, Node* next)
            : value(val)
            , next_node(next) {}
        Type value;
        Node* next_node = nullptr;
    };

// Шаблон класса «Базовый Итератор».
// Определяет поведение итератора на элементы односвязного списка
// ValueType — совпадает с Type (для Iterator) либо с const Type (для ConstIterator)
    template <typename ValueType>
    class BasicIterator 
    {
        // Класс списка объявляется дружественным, чтобы из методов списка
        // был доступ к приватной области итератора
        friend class SingleLinkedList;

        // Конвертирующий конструктор итератора из указателя на узел списка
        explicit BasicIterator(Node* node) 
        {
            node_ = node;
        }

    public:
        // Объявленные ниже типы сообщают стандартной библиотеке о свойствах этого итератора

        // Категория итератора — forward iterator
        // (итератор, который поддерживает операции инкремента и многократное разыменование)
        using iterator_category = std::forward_iterator_tag;
        // Тип элементов, по которым перемещается итератор
        using value_type = Type;
        // Тип, используемый для хранения смещения между итераторами
        using difference_type = std::ptrdiff_t;
        // Тип указателя на итерируемое значение
        using pointer = ValueType*;
        // Тип ссылки на итерируемое значение
        using reference = ValueType&;

        BasicIterator() = default;

        // Конвертирующий конструктор/конструктор копирования
        // При ValueType, совпадающем с Type, играет роль копирующего конструктора
        // При ValueType, совпадающем с const Type, играет роль конвертирующего конструктора
        BasicIterator(const BasicIterator<Type>& other) noexcept 
        {
            node_ = other.node_;
        }

        // Чтобы компилятор не выдавал предупреждение об отсутствии оператора = при наличии
        // пользовательского конструктора копирования, явно объявим оператор = и
        // попросим компилятор сгенерировать его за нас
        BasicIterator& operator=(const BasicIterator& rhs) = default;

        // Оператор сравнения итераторов (в роли второго аргумента выступает константный итератор)
        // Два итератора равны, если они ссылаются на один и тот же элемент списка либо на end()
        [[nodiscard]] bool operator==(const BasicIterator<const Type>& rhs) const noexcept 
        {
            return node_ == rhs.node_;
        }

        // Оператор проверки итераторов на неравенство
        // Противоположен !=
        [[nodiscard]] bool operator!=(const BasicIterator<const Type>& rhs) const noexcept 
        {
            return !(*this == rhs);
        }

        // Оператор сравнения итераторов (в роли второго аргумента итератор)
        // Два итератора равны, если они ссылаются на один и тот же элемент списка либо на end()
        [[nodiscard]] bool operator==(const BasicIterator<Type>& rhs) const noexcept 
        {
            return (node_ == rhs.node_);
        }

        // Оператор проверки итераторов на неравенство
        // Противоположен !=
        [[nodiscard]] bool operator!=(const BasicIterator<Type>& rhs) const noexcept 
        {
            return !(*this == rhs);
        }

        // Оператор прединкремента. После его вызова итератор указывает на следующий элемент списка
        // Возвращает ссылку на самого себя
        // Инкремент итератора, не указывающего на существующий элемент списка, приводит к неопределённому поведению
        BasicIterator& operator++() noexcept 
        {
            if (node_)
            {
                node_ = node_->next_node;
            }
            return *this;
        }

        // Оператор постинкремента. После его вызова итератор указывает на следующий элемент списка
        // Возвращает прежнее значение итератора
        // Инкремент итератора, не указывающего на существующий элемент списка,
        // приводит к неопределённому поведению
        BasicIterator operator++(int) noexcept 
        {
            BasicIterator temp = *this;
            if (node_)
            {
                node_ = node_->next_node;
            }
            return temp;
        }

        // Операция разыменования. Возвращает ссылку на текущий элемент
        // Вызов этого оператора у итератора, не указывающего на существующий элемент списка,
        // приводит к неопределённому поведению
        [[nodiscard]] reference operator*() const noexcept
        {
  // ЗАМЕЧАНИЕ: Стоит добавить assert, что адрес, на который указывает внутреннее поле ненулевой(не nullptr), 
  // чтобы отлавливать выход за пределы списка
  // 
  //  Пояснение: Согласен. В условии задания было сказано не выполнять проверок. Поправил. 
   // И аналогичные замечания везде учёл ниже.
            assert(node_ != nullptr);
            return node_->value;
        }

        // Операция доступа к члену класса. Возвращает указатель на текущий элемент списка
        // Вызов этого оператора у итератора, не указывающего на существующий элемент списка,
        // приводит к неопределённому поведению
        [[nodiscard]] pointer operator->() const noexcept 
        {
            assert(node_ != nullptr);
            return &node_->value;
        }

    private:
        Node* node_ = nullptr;
    };

public:
    using value_type = Type;
    using reference = value_type&;
    using const_reference = const value_type&;

    // Итератор, допускающий изменение элементов списка
    using Iterator = BasicIterator<Type>;
    // Константный итератор, предоставляющий доступ для чтения к элементам списка
    using ConstIterator = BasicIterator<const Type>;

    SingleLinkedList()
    {
        head_.next_node = nullptr;
        size_ = 0;
    }

    SingleLinkedList(std::initializer_list<Type> values)
    {
        SingleLinkedList tmp;
        try
        {
            for (auto it = rbegin(values); it != rend(values); ++it)
            {
                tmp.PushFront(*it);
            }
        }
        catch (...)
        {
            tmp.Clear();
            throw;
        }
        this->swap(tmp);
    }

    SingleLinkedList(const SingleLinkedList& other)
    {
        SingleLinkedList tmp;
        try
        {
            auto it2 = tmp.before_begin();
            for (auto it1 = other.begin();  it1 != other.end(); ++it1, ++it2)
            {
                tmp.InsertAfter(it2, *it1);
            }
        }
        catch (...)
        {
            tmp.Clear();
            throw;
        }
        this->swap(tmp);
    }

    SingleLinkedList& operator=(const SingleLinkedList& rhs)
    {
        if (this != &rhs)
        {
            try
            {
                SingleLinkedList tmp(rhs);
                this->swap(tmp);
            }
            catch (...)
            {
                throw;
            }
        }
        return *this;
    }

    // Обменивает содержимое списков за время O(1)
    void swap(SingleLinkedList& other) noexcept 
    {
// ЗАМЕЧАНИЕ: Лучше использовать std::swap
// 
// Пояснение: Исправил, но интересно чем лучше? короче и более читаемо?
//         А потом переделал обратно. При отладке выяснил, что std::swap вызывает конструктор по ссылке, 
// который вызывает метод swap. Наверное что-то у меня не так в коде, но не придумал как это обойти.
//
 //       std::swap(*this, other);
        Node* tmp_head = head_.next_node;
        size_t tmp_size = size_;
        head_.next_node = other.head_.next_node;
        size_ = other.size_;
        other.head_.next_node = tmp_head;
        other.size_ = tmp_size;
    }

    ~SingleLinkedList()
    {
        Clear();
    }

    void Clear() noexcept
    {
        while (head_.next_node != nullptr)
        {
            Node* temp_ptr = head_.next_node;
            head_.next_node = (*head_.next_node).next_node;
            delete temp_ptr;
            temp_ptr = nullptr;
            --size_;
        }
    }

    // Возвращает итератор, ссылающийся на первый элемент
    // Если список пустой, возвращённый итератор будет равен end()
    [[nodiscard]] Iterator begin() noexcept
    {
        return Iterator(head_.next_node);
    }

    // Возвращает итератор, указывающий на позицию, следующую за последним элементом односвязного списка
    // Разыменовывать этот итератор нельзя — попытка разыменования приведёт к неопределённому поведению
    [[nodiscard]] Iterator end() noexcept 
    {
        return Iterator(nullptr);
    }

    // Возвращает константный итератор, ссылающийся на первый элемент
    // Если список пустой, возвращённый итератор будет равен end()
    // Результат вызова эквивалентен вызову метода cbegin()
    [[nodiscard]] ConstIterator begin() const noexcept 
    {
        return ConstIterator(head_.next_node);
    }

    // Возвращает константный итератор, указывающий на позицию, следующую за последним элементом односвязного списка
    // Разыменовывать этот итератор нельзя — попытка разыменования приведёт к неопределённому поведению
    // Результат вызова эквивалентен вызову метода cend()
    [[nodiscard]] ConstIterator end() const noexcept 
    {
        return ConstIterator(nullptr);
    }

    // Возвращает константный итератор, ссылающийся на первый элемент
    // Если список пустой, возвращённый итератор будет равен cend()
    [[nodiscard]] ConstIterator cbegin() const noexcept
    {
        return  ConstIterator(head_.next_node);
    }

    // Возвращает константный итератор, указывающий на позицию, следующую за последним элементом односвязного списка
    // Разыменовывать этот итератор нельзя — попытка разыменования приведёт к неопределённому поведению
    [[nodiscard]] ConstIterator cend() const noexcept 
    {
        return ConstIterator(nullptr);
    }

    // Возвращает итератор, указывающий на позицию перед первым элементом односвязного списка.
   // Разыменовывать этот итератор нельзя - попытка разыменования приведёт к неопределённому поведению
    [[nodiscard]] Iterator before_begin() noexcept
    {
        return Iterator(&head_);
    }

    // Возвращает константный итератор, указывающий на позицию перед первым элементом односвязного списка.
    // Разыменовывать этот итератор нельзя - попытка разыменования приведёт к неопределённому поведению
    [[nodiscard]] ConstIterator cbefore_begin() const noexcept
    {
        return ConstIterator(const_cast<Node*>(&head_));
    }

    // Возвращает константный итератор, указывающий на позицию перед первым элементом односвязного списка.
    // Разыменовывать этот итератор нельзя - попытка разыменования приведёт к неопределённому поведению
    [[nodiscard]] ConstIterator before_begin() const noexcept
    {
        return ConstIterator(const_cast<Node*>(&head_));
    }

    /*
     * Вставляет элемент value после элемента, на который указывает pos.
     * Возвращает итератор на вставленный элемент
     * Если при создании элемента будет выброшено исключение, список останется в прежнем состоянии
     */
    Iterator InsertAfter(ConstIterator pos, const Type& value)
    {
        assert(pos.node_ != nullptr);
        Node* tmp_ptr = nullptr;
        try
        {
            tmp_ptr = new Node(value, pos.node_->next_node);
        }
        catch (...)
        {
            delete tmp_ptr;
            throw;
        }
        pos.node_->next_node = tmp_ptr;
        ++size_;
        return Iterator(tmp_ptr);
    }

    void PopFront() noexcept
    {
        if (!IsEmpty())
        {
            Node* tmp_ptr = head_.next_node;
            head_.next_node = head_.next_node->next_node;
            delete tmp_ptr;
            tmp_ptr = nullptr;
            --size_;
        }
    }

    void PushFront(const Type& value)
    {
        try
        {
            head_.next_node = new Node(value, head_.next_node);
            ++size_;
        }
        catch (...)
        {
            throw;
        }
    }

    /*
    * Удаляет элемент, следующий за pos.
    * Возвращает итератор на элемент, следующий за удалённым
    */
    Iterator EraseAfter(ConstIterator pos) noexcept
    {
        assert(pos.node_ != nullptr);
        Node* tmp_ptr = pos.node_->next_node;
        pos.node_->next_node = tmp_ptr->next_node;
        delete tmp_ptr;
        tmp_ptr = nullptr;
        --size_;
        return Iterator(pos.node_->next_node);
    }

    // Возвращает количество элементов в списке за время O(1)
    [[nodiscard]] size_t GetSize() const noexcept
    {
        return size_;
    }

    // Сообщает, пустой ли список за время O(1)
    [[nodiscard]] bool IsEmpty() const noexcept
    {
        return size_ == 0;
    }

    //Реверсирует список О(N) -требуется память ещё на один список
    void Reverse()
    {
//   ЗАМЕЧАНИЕ:  Ну тогда этот метод не нужен - там где вы его применяете, можно сделать проще.
// Достаточно сделать локальную переменную - итератор на начало списка(head_) и делать InsertAfter 
//  в цикле в неё, сдвигая её вперед.
// 
//  Пояснение: Согласен. Просто по ходу курса сначала нужно было реализовать конструктор по ссылке, 
// а в следующих уроках нужно было реализовать метод InsertAfter. Соответственно я над работающим конструктором уже не размышлял. 
// Да и метод Reverse может применяться сам по себе, поэтому я сделал его публичным. По этой причине оставил его. 
// А конструктор переделал. Предложенный Вами способ логичнее и более экономичен к памяти.
//
        SingleLinkedList tmp;
        try
        {
            for (const Type& t : *this)
            {
                tmp.PushFront(t);
            }
        }
        catch (...)
        { 
            tmp.Clear();
            throw;
        }
        this->swap(tmp);
    }

private:
    // Фиктивный узел, используется для вставки "перед первым элементом"
    Node head_;
    size_t size_ = 0;
};

//------- Реализация шаблонных функций для работы с экземплярами класса SingleLinkedList -------

template <typename Type>
void swap(SingleLinkedList<Type>& lhs, SingleLinkedList<Type>& rhs) noexcept 
{
    lhs.swap(rhs);
}

template <typename Type>
bool operator==(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs)
{
    return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());;
}

template <typename Type>
bool operator!=(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs) 
{
    //Может быть Переделать, но пока так
    return !(lhs == rhs);
}

template <typename Type>
bool operator<(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs)
{
    return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
}

template <typename Type>
bool operator<=(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs)
{
    return !(rhs > lhs);
}

template <typename Type>
bool operator>(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs)
{
    return rhs < lhs;
}

template <typename Type>
bool operator>=(const SingleLinkedList<Type>& lhs, const SingleLinkedList<Type>& rhs)
{
    return !(lhs < rhs);
}